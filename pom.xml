<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>org.jboss</groupId>
        <artifactId>jboss-parent</artifactId>
        <version>36</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>

    <groupId>io.quarkus</groupId>
    <artifactId>quarkus-universe-parent</artifactId>
    <name>Quarkus universe - Parent pom</name>
    <version>999-SNAPSHOT</version>
    <packaging>pom</packaging>
    <description>Quarkus universe aggregates extensions from Quarkus Core and those developed by the community into a single compatible and versioned set that application developers can reference from their applications to align the dependency versions</description>
    <url>https://github.com/quarkusio/quarkus-universe</url>

    <developers>
        <developer>
            <id>quarkus</id>
            <name>Quarkus Community</name>
            <organization>Red Hat</organization>
            <organizationUrl>http://www.redhat.com</organizationUrl>
        </developer>
    </developers>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <scm>
        <url>https://github.com/quarkusio/quarkus-platform</url>
        <connection>scm:git:git@github.com:quarkusio/quarkus-platform.git</connection>
        <developerConnection>scm:git:git@github.com:quarkusio/quarkus-platform.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <graalvmHome>${env.GRAALVM_HOME}</graalvmHome>
        <postgres.url>jdbc:postgresql:hibernate_orm_test</postgres.url>

        <quarkus.version>1.3.0.Final</quarkus.version>

        <!-- After upgrading camel-quarkus regenerate the test modules by running

             mvn validate -Pregen -N
        -->
        <camel-quarkus.version>1.0.0-M3</camel-quarkus.version>

        <quarkus-qpid-jms.version>0.13.0</quarkus-qpid-jms.version>

        <kogito-quarkus.version>0.8.0</kogito-quarkus.version>

        <flatten-plugin.version>1.1.0</flatten-plugin.version>
        <rpkgtests-maven-plugin.version>0.7.0</rpkgtests-maven-plugin.version>
        <groovy-maven-plugin.version>2.1.1</groovy-maven-plugin.version>
        <useReleaseProfile>true</useReleaseProfile>
    </properties>

    <modules>
        <module>bom/runtime</module>
        <module>bom/deployment</module>

        <!-- Integration Tests -->
        <module>integration-tests</module>
        <module>kogito-integration-tests</module>
    </modules>

    <distributionManagement>
        <snapshotRepository>
            <id>sonatype-nexus-snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>sonatype-nexus-release</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <configuration>
                        <systemProperties>
                            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        </systemProperties>
                        <excludedGroups>quarkus-platform-ignore</excludedGroups>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <configuration>
                        <excludedGroups>quarkus-platform-ignore</excludedGroups>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>groovy-maven-plugin</artifactId>
                    <version>${groovy-maven-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.l2x6.rpkgtests</groupId>
                    <artifactId>rpkgtests-maven-plugin</artifactId>
                    <version>${rpkgtests-maven-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>release</id>
            <build>
                <plugins>
                    <plugin>
                        <!--
                        ## IMPORTANT ##
                        In your ~/.m2/settings.xml you need to add and edit the following profile:
                        <profile>
                            <id>release</id>
                            <properties>
                                <gpg.useagent>false</gpg.useagent>
                                <gpg.executable>/usr/local/Cellar/gnupg@1.4/1.4.23_1/bin/gpg1</gpg.executable> <- use gpg1 on Mac OS X <gpg.homedir>~/.gnupg</gpg.homedir>  <- Update to your own directory <gpg.passphrase>******</gpg.passphrase> <- Add your passphrase </properties>
                        </profile>
                         -->
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>regen</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.l2x6.rpkgtests</groupId>
                        <artifactId>rpkgtests-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>create-test-modules</id>
                                <inherited>false</inherited>
                                <goals>
                                    <goal>create-test-modules</goal>
                                </goals>
                                <phase>validate</phase>
                                <configuration>
                                    <testJarXmls>
                                        <testJarXml>
                                            <groupId>org.apache.camel.quarkus</groupId>
                                            <artifactId>camel-quarkus-test-list</artifactId>
                                            <version>${camel-quarkus.version}</version>
                                            <versionPlaceholder>@{camel-quarkus.version}</versionPlaceholder>
                                        </testJarXml>
                                    </testJarXmls>
                                    <testModulesParentDir>integration-tests</testModulesParentDir>
                                    <testModuleArtifactIdReplacers>/^camel-quarkus-integration-test-(.*)$/quarkus-universe-integration-tests-camel-$1/</testModuleArtifactIdReplacers>
                                    <testModuleDirReplacers>/^camel-quarkus-integration-test-(.*)$/camel-$1/</testModuleDirReplacers>
                                    <rpkgModulePomXmlPath>integration-tests/rpkgtests/pom.xml</rpkgModulePomXmlPath>
                                    <rpkgtestsPluginVersion>@{rpkgtests-maven-plugin.version}</rpkgtestsPluginVersion>
                                    <templatesUriBase>file:src/rpkg-templates</templatesUriBase>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>create-test-modules</id>
                                <inherited>false</inherited>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <phase>validate</phase>
                                <configuration>
                                    <source><![CDATA[
                                        import java.io.IOException;
                                        import java.nio.charset.StandardCharsets;
                                        import java.nio.file.Files;
                                        import java.nio.file.Path;
                                        import java.nio.file.Paths;
                                        import java.util.stream.Stream;

                                        final byte[] content = ("The purpose of this file is to have a non-empty test-classes directory that will\n"
                                                + "be added to the test classpath and used by the Quarkus test extension for storing\n"
                                                + "generated classes and other resources that should appear on the classpath during\n"
                                                + "the test execution.").getBytes(StandardCharsets.UTF_8)
                                        Stream<Path> items = null
                                        try {
                                            items = Files.list(Paths.get("${basedir}/integration-tests"))
                                            items
                                                .filter{itestDir -> Files.isDirectory(itestDir)}
                                                .filter{itestDir -> !"rpkgtests".equals(itestDir.getFileName().toString())}
                                                .forEach{itestDir ->
                                                    final Path srcTestResources = itestDir.resolve("src/test/resources");
                                                    Files.createDirectories(srcTestResources);
                                                    Files.write(srcTestResources.resolve("classpathseed"), content);
                                                };
                                            ;
                                        } finally {
                                            items.close()
                                        }
                                    ]]></source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>regen-kogito</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.l2x6.rpkgtests</groupId>
                        <artifactId>rpkgtests-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>create-test-modules</id>
                                <inherited>false</inherited>
                                <goals>
                                    <goal>create-test-modules</goal>
                                </goals>
                                <phase>validate</phase>
                                <configuration>
                                    <testJars>
                                        <testJar>
                                            <groupId>org.kie.kogito</groupId>
                                            <artifactId>kogito-quarkus-integration-test</artifactId>
                                            <version>${kogito-quarkus.version}</version>
                                        </testJar>
                                    </testJars>
                                    <testModulesParentDir>kogito-integration-tests</testModulesParentDir>
                                    <rpkgModulePomXmlPath>kogito-integration-tests/rpkgtests/pom.xml</rpkgModulePomXmlPath>
                                    <rpkgtestsPluginVersion>@{rpkgtests-maven-plugin.version}</rpkgtestsPluginVersion>
                                    <templatesUriBase>file:src/kogito-rpkg-templates</templatesUriBase>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>create-test-modules</id>
                                <inherited>false</inherited>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <phase>validate</phase>
                                <configuration>
                                    <source><![CDATA[
                                        import java.io.IOException;
                                        import java.nio.charset.StandardCharsets;
                                        import java.nio.file.Files;
                                        import java.nio.file.Path;
                                        import java.nio.file.Paths;
                                        import java.util.stream.Stream;

                                        final byte[] content = ("The purpose of this file is to have a non-empty test-classes directory that will\n"
                                                + "be added to the test classpath and used by the Quarkus test extension for storing\n"
                                                + "generated classes and other resources that should appear on the classpath during\n"
                                                + "the test execution.").getBytes(StandardCharsets.UTF_8)
                                        Stream<Path> items = null
                                        try {
                                            items = Files.list(Paths.get("${basedir}/integration-tests"))
                                            items
                                                .filter{itestDir -> Files.isDirectory(itestDir)}
                                                .filter{itestDir -> !"rpkgtests".equals(itestDir.getFileName().toString())}
                                                .forEach{itestDir ->
                                                    final Path srcTestResources = itestDir.resolve("src/test/resources");
                                                    Files.createDirectories(srcTestResources);
                                                    Files.write(srcTestResources.resolve("classpathseed"), content);
                                                };
                                            ;
                                        } finally {
                                            items.close()
                                        }
                                    ]]></source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
